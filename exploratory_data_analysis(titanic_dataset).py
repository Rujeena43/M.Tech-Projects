# -*- coding: utf-8 -*-
"""Exploratory Data Analysis(Titanic Dataset).ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Yp7TKpCWFeRsi98mI44iRK4dPBe_4Onc
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
# %matplotlib inline

df=pd.read_csv("/content/Titanic_train.csv")

df.shape

df.head()

df.columns.values

"""Categorical Columns
1.survived
2.sex
3.sibSp
4.ParCh
5.Embarked


Numerical Columns
1.Age
2.Fare
3.PassengerId

Mixed Columns
1.Name
2.Ticket
3.Cabin
"""

df.info()

df.isnull().sum()

#Few conclusion

#1.Missing values in Age, Cabin and Embarked columns
#2. More than 70% values in cabin are missing, we will have to drop
#3. Few columns have inappropriate data type

#dropping cabin column

df.drop(columns=['Cabin'],inplace=True)

# Imputing missing values for age
# strategy-mean
df['Age'].fillna(df['Age'].mean(), inplace=True)

#Imputing missing values for embarked

# finding the most appeared value in embarked column

df['Embarked'].value_counts()

# S it is

df['Embarked'].fillna('S', inplace=True)

# want to check one more thing
#should i change the sibSp and ParCh to categories

df['SibSp'].value_counts()

df['Parch'].value_counts()

"""Changing data type for the following columns:
1.survived(category)
2.PClass(category)
3.Sex(category)
4.Age(int)
5.Embarked(category)

"""

df['Survived']=df['Survived'].astype('category')
df['Pclass']=df['Pclass'].astype('category')
df['Sex']=df['Sex'].astype('category')
df['Age']=df['Age'].astype('int')
df['Embarked']=df['Embarked'].astype('category')

df.info()

df.describe()

df['Survived'].value_counts()



# Univariate Analysis

# Let's start with the Survived col

sns.countplot(data=df, x='Survived')

death_percent=round((df['Survived'].value_counts().values[0]/891)*100)

print("Out of 891, {}% people died in the accident".format(death_percent))

# Pclass column

print((df['Pclass'].value_counts()/891)*100)

sns.countplot(data=df, x='Pclass')

# Conclusion : Pclass 3 was the most crowded class

print(df['Sex'].value_counts()/891*100)
sns.countplot(data=df, x='Sex')

print(df['SibSp'].value_counts()/891*100)
sns.countplot(data=df, x='SibSp')

print(df['Parch'].value_counts()/891*100)
sns.countplot(data=df, x='Parch')

print(df['Embarked'].value_counts()/891*100)
sns.countplot(data=df, x='Embarked')

# Age column
sns.distplot(df['Age'])

print(df['Age'].skew())
print(df['Age'].kurt())

sns.boxplot(data=df, x='Age')

# out of curiosity

print("people with age in between 60 and 70 are", df[(df['Age']>60) & (df['Age']<70)].shape[0])
print("people with age greater than 70 and less than 75 are", df[(df['Age']>=70) & (df['Age']<=75)].shape[0])
print("people with age greater than 75 are", df[df['Age']>75].shape[0])

print('-'*50)

print("people with age in between 0 and 1 are", df[(df['Age']>0)& (df['Age']<=1)].shape[0])

"""Conclusion:
1. for all practical purpose age can be considered as normal distribution

2. deeper analysis is requuired for outlier detection
"""

sns.distplot(df['Fare'])

print(df['Fare'].skew())
print(df['Fare'].kurt())

sns.boxplot(data=df, x='Fare')

print("people with fare in between $200 and $300",df[(df['Fare']>200) & (df['Fare']<300)].shape[0])
print("people with fare greater than $300",df[(df['Fare']>=300)].shape[0])

"""Conclusion:

1. Highly skewed data, a lot of peopple had cheaper tickets.

2. Outliers are there in the data
"""

# Multivariate Analysis

# survival with Pclass
sns.countplot(data=df, x='Survived', hue=df['Pclass'])

pd.crosstab(df['Pclass'], df['Survived']).apply(lambda r: round((r/r.sum())*100,1), axis=1)

# survival with Sex
sns.countplot(data=df, x='Survived', hue=df['Sex'])
pd.crosstab(df['Sex'], df['Survived']).apply(lambda r: round((r/r.sum())*100,1), axis=1)

# survival with Embarked
sns.countplot(data=df, x='Survived', hue=df['Embarked'])
pd.crosstab(df['Embarked'], df['Survived']).apply(lambda r: round((r/r.sum())*100,1), axis=1)

#survived with Age
plt.figure(figsize=(15,6))
sns.distplot(df[df['Survived']==0]['Age'])
sns.distplot(df[df['Survived']==1]['Age'])

# survival with Fare
plt.figure(figsize=(15,6))
sns.distplot(df[df['Survived']==0]['Fare'])
sns.distplot(df[df['Survived']==1]['Fare'])

sns.pairplot(df)

sns.heatmap(df.corr())

#Feature Engineering
# we will create a new column by the name of family which will be the sum of SibSp and Parch cols

df['family_size']=df['Parch'] + df['SibSp']

df.sample(5)

def family_type(number):
  if number==0:
    return "Alone"
  elif number>0 and number<=4:
    return "Medium"
  else:
    return "Large"

df['family_type'] = df['family_size'].apply(family_type)

df.head(5)

pd.crosstab(df['family_type'], df['Survived']).apply(lambda r: round((r/r.sum())*100,1), axis=1)

"""**Detecting Outliers**

Numerical data:
1. if the data is following normal distribution, anything beyond -3SD from mean and 3SD from mean can be considered as an outlier.

2. if data does not folow normal distribution , using boxplot we can estimate points beyond Q1-1.5IQR and Q3+1.5 IQR

Categorical data:
1. if the column is higly imbalance for eg. male 10000 and female 2 then we can eliminate female
"""

#handling outliers in age
df=df[df['Age']< (df['Age'].mean() + 3* df['Age'].std())]
df.shape

# handling outliers from fare column
# finding Quartile
Q1= np.percentile(df['Fare'],25)
Q3=np.percentile(df['Fare'],75)

outliers_low= Q1- 1.5 * (Q3-Q1)
outliers_high= Q3 + 1.5 * (Q3-Q1)

df= df[(df['Fare']>outliers_low) & (df['Fare']<outliers_high)]

df.sample(5)

df.shape




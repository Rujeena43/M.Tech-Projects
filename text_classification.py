# -*- coding: utf-8 -*-
"""Text classification.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1B-w1kBmvtO1IyQGEDVJH1ruDOxmNWArB
"""

!pip install tensorflow-text

import tensorflow as tf
import tensorflow_hub as hub
import tensorflow_text as text

import pandas as pd

df=pd.read_csv("/content/spam_ham_dataset.csv")
df.head(5)

df.groupby('label').describe()

1499/3672 #to check whether dataset balance or not
          #if imbalance we need to balance it

from sklearn.model_selection import train_test_split
x_train, x_test, y_train, y_test = train_test_split(df['text'], df['label_num'], stratify=df['label_num'])

x_train.head(4)

Bert_preprocess_url = hub.KerasLayer('https://tfhub.dev/tensorflow/bert_en_uncased_preprocess/3')
Bert_encoder_url = hub.KerasLayer('https://tfhub.dev/tensorflow/bert_en_uncased_L-12_H-768_A-12/4')

def get_sentence_embedding(sentence):
  preprocess_text=Bert_preprocess_url(sentence)
  return Bert_encoder_url(preprocess_text)['pooled_output']

get_sentence_embedding(['i am feeeling very much bored',
                        "don't be in a relationship" ])

e=get_sentence_embedding(["banana",
                         "biscuit",
                         "mango",
                         "grapes",
                         "Ratan Tata",
                         "sachin Tendulkar",
                         "Ranbir Kapoor"])

e

from sklearn.metrics.pairwise import cosine_similarity

cosine_similarity([e[2]], [e[4]])

#bert layers
text_input = tf.keras.layers.Input(shape=(),dtype=tf.string, name="text")
preprocessed_text = Bert_preprocess_url(text_input)
output = Bert_encoder_url(preprocessed_text)

#neural networks layers
l = tf.keras.layers.Dropout(0.1, name='dropout')(output['pooled_output'])

l = tf.keras.layers.Dense(1,activation='sigmoid', name='output')(l)

#construct final model
model = tf.keras.Model(inputs = [text_input], outputs =[l])

model.summary()

METRICS = [
    tf.keras.metrics.BinaryAccuracy(name='accuracy'),
    tf.keras.metrics.Precision(name='precision'),
    tf.keras.metrics.Recall(name='recall')

]

model.compile(optimizer='adam',
              loss='binary_crossentropy',
              metrics=METRICS)

model.fit(x_train, y_train, epochs=10)

model.evaluate(x_test, y_test)

y_predicted = model.predict(x_test)
y_predicted = y_predicted.flatten()

import numpy as np

y_predicted = np.where(y_predicted > 0.5, 1, 0)
y_predicted

from sklearn.metrics import confusion_matrix, classification_report
cm= confusion_matrix(y_test, y_predicted)
cm

from matplotlib import pyplot as plt
import seaborn as sn
sn.heatmap(cm, annot=True, fmt='d')
plt.xlabel('predicted')
plt.ylabel('Actual')

print(classification_report(y_test, y_predicted))


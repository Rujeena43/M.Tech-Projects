# -*- coding: utf-8 -*-
"""Speech Emotion recognition.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12V-G-P0D_nnoHJcAdbhv4vf_mtjjxeop
"""

!pip install -q kaggle

from google.colab import files
files.upload()

!mkdir -p ~/.kaggle
!cp kaggle.json ~/.kaggle/

!kaggle datasets download -d uwrfkaggler/ravdess-emotional-speech-audio

import zipfile
zip_ref = zipfile.ZipFile('/content/ravdess-emotional-speech-audio.zip')
zip_ref.extractall('/content')
zip_ref.close()

import os
import numpy as np
import pandas as pd
import librosa
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout
from tensorflow.keras.callbacks import EarlyStopping
import matplotlib.pyplot as plt

# Set the path to the RAVDESS dataset
dataset_dir = '/content/audio_speech_actors_01-24'

paths = []
labels = []

for dirname, _, filenames in os.walk(dataset_dir):
    for filename in filenames:
        file_path = os.path.join(dirname, filename)
        paths.append(file_path)

        label = filename.split('-')[2]
        labels.append(label.lower())

print('Dataset is Loaded')

paths

labels

## Create a dataframe
df = pd.DataFrame()
df['speech'] = paths
df['label'] = labels
df.head()

df['label'].value_counts()

import librosa
import matplotlib.pyplot as plt

def waveplot(data, sr, emotion):
    plt.figure(figsize=(10, 4))
    plt.title(emotion, size=20)
    plt.plot(data)
    plt.show()

def spectogram(data, sr, emotion):
    x = librosa.stft(data)
    xdb = librosa.amplitude_to_db(abs(x))
    plt.figure(figsize=(11,4))
    plt.title(emotion, size=20)
    librosa.display.specshow(xdb, sr=sr, x_axis='time', y_axis='hz')
    plt.colorbar()

emotion = '01'
path = np.array(df['speech'][df['label']==emotion])[1]
data, sampling_rate = librosa.load(path)
waveplot(data, sampling_rate, emotion)
spectogram(data, sampling_rate, emotion)

def extract_mfcc(filename):
    y, sr = librosa.load(filename, duration=3, offset=0.5)
    mfcc = np.mean(librosa.feature.mfcc(y=y, sr=sr, n_mfcc=40).T, axis=0)
    return mfcc

extract_mfcc(df['speech'][0])

X_mfcc = df['speech'].apply(lambda x: extract_mfcc(x))

X_mfcc

X = [x for x in X_mfcc]
X = np.array(X)
X.shape

## input split
X = np.expand_dims(X, -1)
X.shape

from sklearn.preprocessing import OneHotEncoder
enc = OneHotEncoder()
y = enc.fit_transform(df[['label']])

y = y.toarray()

y.shape

X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)

import tensorflow as tf

model2 = tf.keras.Sequential([
    tf.keras.layers.Dense(384, input_shape=(40,)),

    tf.keras.layers.Dense(256, activation='relu'),
    tf.keras.layers.Dropout(0.2),
    tf.keras.layers.Dense(128, activation='relu'),
    tf.keras.layers.Dropout(0.2),
    tf.keras.layers.Dense(8, activation='softmax')
])


model2.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
model2.summary()

history = model2.fit(X_train, y_train, validation_data=(X_val, y_val), epochs=100, batch_size=512, shuffle=True)

epochs = list(range(100))
acc = history.history['accuracy']
val_acc = history.history['val_accuracy']

plt.plot(epochs, acc, label='train accuracy')
plt.plot(epochs, val_acc, label='val accuracy')
plt.xlabel('epochs')
plt.ylabel('accuracy')
plt.legend()
plt.show()

X_lstm = np.expand_dims(X, axis=2)
X_train_lstm, X_val_lstm, y_train, y_val = train_test_split(X_lstm, y, test_size=0.2, random_state=42)

from sklearn.model_selection import train_test_split
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import LSTM, Dense, Dropout
from tensorflow.keras.callbacks import EarlyStopping
import matplotlib.pyplot as plt
from keras.regularizers import l1_l2

model_lstm = Sequential()
model_lstm.add(LSTM(384, input_shape=(40, 1)))
model_lstm.add(Dense(256, activation='relu'))  # Dense layer added
model_lstm.add(Dropout(0.2))
model_lstm.add(Dense(128, activation='relu'))  # Dense layer added
model_lstm.add(Dropout(0.2))
model_lstm.add(Dense(8, activation='softmax'))

model_lstm.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])
model_lstm.summary()

history_lstm = model_lstm.fit(X_train_lstm, y_train, validation_data=(X_val_lstm, y_val), epochs=100, batch_size=512, shuffle=True)

epochs = list(range(100))
acc = history_lstm.history['accuracy']
val_acc = history_lstm.history['val_accuracy']

plt.plot(epochs, acc, label='train accuracy')
plt.plot(epochs, val_acc, label='val accuracy')
plt.xlabel('epochs')
plt.ylabel('accuracy')
plt.legend()
plt.show()

X_svm = X.reshape(X.shape[0], -1)
y_svm = np.argmax(y, axis=1)
X_train_svm, X_val_svm, y_train_svm, y_val_svm = train_test_split(X_svm, y_svm, test_size=0.2, random_state=42)

from sklearn.model_selection import train_test_split
from sklearn.svm import SVC
from sklearn.metrics import classification_report


svm_model = SVC()
svm_model.fit(X_train_svm, y_train_svm)

y_val_pred_svm = svm_model.predict(X_val_svm)

report_svm = classification_report(y_val_svm, y_val_pred_svm)
print(report_svm)